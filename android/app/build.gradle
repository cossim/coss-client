apply plugin: 'com.android.application'

android {
    namespace "com.hitosea.coss"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.hitosea.coss"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "0.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
        signingConfigs {
            // release {
            //     storeFile file('release.keystore')
            //     storePassword 'release'
            //     keyAlias 'release'
            //     keyPassword 'release'
            // }
             debug {
                storeFile file('COSS_KEYS')
                storePassword 'hitosea.coss'
                keyPassword 'hitosea.coss'
                keyAlias 'hitosea_coss'
             }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //警告！在生产中，您需要生成自己的密钥库文件。
            // signingConfig signingConfigs.release
            // shrinkResources false
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

     android.applicationVariants.all {
        variant -> variant.outputs.all { output ->
                // def date = new Date().format("yyyyMMddHHmmss",
                //         TimeZone.getTimeZone("GMT+08"))
                if (variant.buildType.name == 'debug') {
                    output.outputFileName = "COSS-" +
                            "${android.defaultConfig.versionName}_debug.apk"
                }else if (variant.buildType.name == 'release'){
                    output.outputFileName = "COSS-" +
                            "${android.defaultConfig.versionName}.apk"
                }
            }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')

    // 以下依赖都需要添加
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'commons-codec:commons-codec:1.6'
    implementation 'androidx.annotation:annotation:1.1.0'
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}